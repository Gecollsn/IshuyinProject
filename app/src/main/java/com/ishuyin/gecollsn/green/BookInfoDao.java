package com.ishuyin.gecollsn.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ishuyin.gecollsn.db.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "bookInfoTable".
*/
public class BookInfoDao extends AbstractDao<BookInfo, Long> {

    public static final String TABLENAME = "bookInfoTable";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Order = new Property(1, String.class, "order", false, "ORDER");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Thumb = new Property(3, String.class, "thumb", false, "THUMB");
        public final static Property BookPlayer = new Property(4, String.class, "bookPlayer", false, "BOOK_PLAYER");
        public final static Property LatestUpdate = new Property(5, String.class, "latestUpdate", false, "LATEST_UPDATE");
        public final static Property BookDownloadUrl = new Property(6, String.class, "bookDownloadUrl", false, "BOOK_DOWNLOAD_URL");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Download = new Property(8, int.class, "download", false, "DOWNLOAD");
        public final static Property Favorite = new Property(9, int.class, "favorite", false, "FAVORITE");
        public final static Property Recent = new Property(10, int.class, "recent", false, "RECENT");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"bookInfoTable\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER\" TEXT," + // 1: order
                "\"TITLE\" TEXT," + // 2: title
                "\"THUMB\" TEXT," + // 3: thumb
                "\"BOOK_PLAYER\" TEXT," + // 4: bookPlayer
                "\"LATEST_UPDATE\" TEXT," + // 5: latestUpdate
                "\"BOOK_DOWNLOAD_URL\" TEXT," + // 6: bookDownloadUrl
                "\"CREATE_TIME\" TEXT," + // 7: createTime
                "\"DOWNLOAD\" INTEGER NOT NULL ," + // 8: download
                "\"FAVORITE\" INTEGER NOT NULL ," + // 9: favorite
                "\"RECENT\" INTEGER NOT NULL );"); // 10: recent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"bookInfoTable\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(2, order);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(4, thumb);
        }
 
        String bookPlayer = entity.getBookPlayer();
        if (bookPlayer != null) {
            stmt.bindString(5, bookPlayer);
        }
 
        String latestUpdate = entity.getLatestUpdate();
        if (latestUpdate != null) {
            stmt.bindString(6, latestUpdate);
        }
 
        String bookDownloadUrl = entity.getBookDownloadUrl();
        if (bookDownloadUrl != null) {
            stmt.bindString(7, bookDownloadUrl);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
        stmt.bindLong(9, entity.getDownload());
        stmt.bindLong(10, entity.getFavorite());
        stmt.bindLong(11, entity.getRecent());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(2, order);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(4, thumb);
        }
 
        String bookPlayer = entity.getBookPlayer();
        if (bookPlayer != null) {
            stmt.bindString(5, bookPlayer);
        }
 
        String latestUpdate = entity.getLatestUpdate();
        if (latestUpdate != null) {
            stmt.bindString(6, latestUpdate);
        }
 
        String bookDownloadUrl = entity.getBookDownloadUrl();
        if (bookDownloadUrl != null) {
            stmt.bindString(7, bookDownloadUrl);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
        stmt.bindLong(9, entity.getDownload());
        stmt.bindLong(10, entity.getFavorite());
        stmt.bindLong(11, entity.getRecent());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThumb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBookPlayer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLatestUpdate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBookDownloadUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDownload(cursor.getInt(offset + 8));
        entity.setFavorite(cursor.getInt(offset + 9));
        entity.setRecent(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
